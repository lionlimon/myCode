{"ast":null,"code":"import { takeEvery, put, call } from 'redux-saga/effects';\nimport { SEND_REGISTER_DATA, SEND_LOGIN_DATA, putAuthData, putFailedAuthData } from './actions';\nimport * as config from '../config';\nimport fetchWithAuth from '../fetchWithAuth';\n\nfunction fetchRegisterData(data) {\n  return fetchWithAuth(config.URL_REGISTER_API, 'POST', data);\n}\n\nfunction fetchLoginData(data) {\n  const newData = {\n    username: data.email,\n    password: data.password,\n    grant_type: 'password',\n    client_id: config.CLIENT_ID,\n    client_secret: config.CLIENT_SECRET\n  };\n  return fetch(config.URL_LOGIN_API, {\n    method: 'POST',\n    body: JSON.stringify(newData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(response => response.status === 404 || response.ok ? response.json() : Promise.reject(response)).catch(e => console.error(e));\n}\n\nfunction* workerRegisterData(action) {\n  const data = yield call(fetchRegisterData, action.payload);\n  console.log(data && data.sucess === true);\n  if (data && data.success === true) yield put(putAuthData(data));else yield put(putFailedAuthData(data));\n}\n\nfunction* workerLoginData(action) {\n  const data = yield call(fetchLoginData, action.payload);\n  console.log(data);\n  if (data) yield put(putAuthData(data));else yield put(putFailedAuthData(data));\n}\n\nexport function* watchRegisterData() {\n  yield takeEvery(SEND_REGISTER_DATA, workerRegisterData);\n}\nexport function* watchLoginData() {\n  yield takeEvery(SEND_LOGIN_DATA, workerLoginData);\n}","map":{"version":3,"sources":["C:/Users/limon/Desktop/my projects/myCode/myCode.React/my_code/src/store/auth/sagas.js"],"names":["takeEvery","put","call","SEND_REGISTER_DATA","SEND_LOGIN_DATA","putAuthData","putFailedAuthData","config","fetchWithAuth","fetchRegisterData","data","URL_REGISTER_API","fetchLoginData","newData","username","email","password","grant_type","client_id","CLIENT_ID","client_secret","CLIENT_SECRET","fetch","URL_LOGIN_API","method","body","JSON","stringify","headers","then","response","status","ok","json","Promise","reject","catch","e","console","error","workerRegisterData","action","payload","log","sucess","success","workerLoginData","watchRegisterData","watchLoginData"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,GAApB,EAAyBC,IAAzB,QAAqC,oBAArC;AACA,SAASC,kBAAT,EAA6BC,eAA7B,EAA8CC,WAA9C,EAA2DC,iBAA3D,QAAoF,WAApF;AAEA,OAAO,KAAKC,MAAZ,MAAwB,WAAxB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;;AAEA,SAASC,iBAAT,CAA2BC,IAA3B,EAAiC;AAChC,SAAOF,aAAa,CAACD,MAAM,CAACI,gBAAR,EAA0B,MAA1B,EAAkCD,IAAlC,CAApB;AACA;;AAGD,SAASE,cAAT,CAAwBF,IAAxB,EAA8B;AAE7B,QAAMG,OAAO,GAAG;AACfC,IAAAA,QAAQ,EAAEJ,IAAI,CAACK,KADA;AAEfC,IAAAA,QAAQ,EAAEN,IAAI,CAACM,QAFA;AAGfC,IAAAA,UAAU,EAAE,UAHG;AAIfC,IAAAA,SAAS,EAAEX,MAAM,CAACY,SAJH;AAKfC,IAAAA,aAAa,EAAEb,MAAM,CAACc;AALP,GAAhB;AASA,SAAOC,KAAK,CAACf,MAAM,CAACgB,aAAR,EAAuB;AAClCC,IAAAA,MAAM,EAAE,MAD0B;AAElCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAed,OAAf,CAF4B;AAGlCe,IAAAA,OAAO,EAAE;AACR,sBAAgB;AADR;AAHyB,GAAvB,CAAL,CAOLC,IAPK,CAOAC,QAAQ,IAAIA,QAAQ,CAACC,MAAT,KAAoB,GAApB,IAA2BD,QAAQ,CAACE,EAApC,GAAyCF,QAAQ,CAACG,IAAT,EAAzC,GAA2DC,OAAO,CAACC,MAAR,CAAeL,QAAf,CAPvE,EAQLM,KARK,CAQEC,CAAD,IAAOC,OAAO,CAACC,KAAR,CAAcF,CAAd,CARR,CAAP;AASA;;AAED,UAAUG,kBAAV,CAA6BC,MAA7B,EAAqC;AAEpC,QAAM/B,IAAI,GAAG,MAAMR,IAAI,CAACO,iBAAD,EAAoBgC,MAAM,CAACC,OAA3B,CAAvB;AAEAJ,EAAAA,OAAO,CAACK,GAAR,CAAYjC,IAAI,IAAIA,IAAI,CAACkC,MAAL,KAAgB,IAApC;AAEA,MAAIlC,IAAI,IAAIA,IAAI,CAACmC,OAAL,KAAiB,IAA7B,EACC,MAAM5C,GAAG,CAACI,WAAW,CAACK,IAAD,CAAZ,CAAT,CADD,KAGC,MAAMT,GAAG,CAACK,iBAAiB,CAACI,IAAD,CAAlB,CAAT;AACD;;AAED,UAAUoC,eAAV,CAA0BL,MAA1B,EAAkC;AACjC,QAAM/B,IAAI,GAAG,MAAMR,IAAI,CAACU,cAAD,EAAiB6B,MAAM,CAACC,OAAxB,CAAvB;AACAJ,EAAAA,OAAO,CAACK,GAAR,CAAYjC,IAAZ;AACA,MAAIA,IAAJ,EACC,MAAMT,GAAG,CAACI,WAAW,CAACK,IAAD,CAAZ,CAAT,CADD,KAGC,MAAMT,GAAG,CAACK,iBAAiB,CAACI,IAAD,CAAlB,CAAT;AACD;;AAED,OAAO,UAAUqC,iBAAV,GAA8B;AACpC,QAAM/C,SAAS,CAACG,kBAAD,EAAqBqC,kBAArB,CAAf;AACA;AAED,OAAO,UAAUQ,cAAV,GAA2B;AACjC,QAAMhD,SAAS,CAACI,eAAD,EAAkB0C,eAAlB,CAAf;AACA","sourcesContent":["import { takeEvery, put, call } from 'redux-saga/effects';\r\nimport { SEND_REGISTER_DATA, SEND_LOGIN_DATA, putAuthData, putFailedAuthData } from './actions';\r\n\r\nimport * as config from '../config';\r\nimport fetchWithAuth from '../fetchWithAuth';\r\n\r\nfunction fetchRegisterData(data) {\r\n\treturn fetchWithAuth(config.URL_REGISTER_API, 'POST', data);\r\n}\r\n\r\n\r\nfunction fetchLoginData(data) {\r\n\t\r\n\tconst newData = {\r\n\t\tusername: data.email,\r\n\t\tpassword: data.password,\r\n\t\tgrant_type: 'password',\r\n\t\tclient_id: config.CLIENT_ID,\r\n\t\tclient_secret: config.CLIENT_SECRET\r\n\t}\r\n\r\n\r\n\treturn fetch(config.URL_LOGIN_API, { \r\n\t\tmethod: 'POST', \r\n\t\tbody: JSON.stringify(newData),\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t},\r\n\t})\r\n\t\t.then(response => response.status === 404 || response.ok ? response.json() : Promise.reject(response))\r\n\t\t.catch((e) => console.error(e));\r\n}\r\n\r\nfunction* workerRegisterData(action) {\r\n\t\r\n\tconst data = yield call(fetchRegisterData, action.payload);\r\n\t\r\n\tconsole.log(data && data.sucess === true);\r\n\r\n\tif (data && data.success === true) \t\r\n\t\tyield put(putAuthData(data));\r\n\telse \r\n\t\tyield put(putFailedAuthData(data));\r\n}\r\n\r\nfunction* workerLoginData(action) {\r\n\tconst data = yield call(fetchLoginData, action.payload);\r\n\tconsole.log(data);\r\n\tif (data) \t\r\n\t\tyield put(putAuthData(data));\r\n\telse \r\n\t\tyield put(putFailedAuthData(data));\r\n}\r\n\r\nexport function* watchRegisterData() {\r\n\tyield takeEvery(SEND_REGISTER_DATA, workerRegisterData);\r\n}\r\n\r\nexport function* watchLoginData() {\r\n\tyield takeEvery(SEND_LOGIN_DATA, workerLoginData);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}