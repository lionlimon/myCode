{"ast":null,"code":"import { takeEvery, put, call } from 'redux-saga/effects';\nimport { GET_USER_PROJECTS, CREATE_USER_PROJECT, putGottenUserProjects, putCreatedUserProject } from './actions';\nimport { addNotify } from '../notify/actions';\nimport * as config from '../config';\nimport store from '../index';\n\nfunction fetchGetProjectsData(data) {\n  const USER_TOKEN = store.getState().auth.token;\n  return fetch(config.URL_PROJECT_API, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': `Bearer ${USER_TOKEN}`\n    }\n  }).then(response => response.status == 404 || response.ok ? response.json() : Promise.reject(response)).catch(e => console.error(e));\n}\n\nfunction fetchCreateProjectsData(data) {\n  const USER_TOKEN = store.getState().auth.token;\n  const project = data;\n  return fetch(config.URL_PROJECT_API, {\n    method: 'POST',\n    body: project,\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': `Bearer ${USER_TOKEN}`\n    }\n  }).then(response => response.status == 404 || response.ok ? response.json() : Promise.reject(response)).catch(e => console.error(e));\n}\n\nfunction* workerGetProjectsData(action) {\n  const data = yield call(fetchGetProjectsData, action.payload);\n  console.log(data);\n  if (data.success) yield put(putGottenUserProjects(data));\n}\n\nfunction* workerCreateProjectsData(action) {\n  const data = yield call(fetchCreateProjectsData, action.payload);\n  console.log(data);\n  if (data.success) yield put(putCreatedUserProject(data));\n}\n\nexport function* watchGetProjectsData() {\n  yield takeEvery(GET_USER_PROJECTS, workerGetProjectsData);\n}\nexport function* watchCreateProjectsData() {\n  console.log('watcher: ', CREATE_USER_PROJECT);\n  yield takeEvery(CREATE_USER_PROJECT, workerCreateProjectsData);\n}","map":{"version":3,"sources":["C:/Users/limon/Desktop/my projects/myCode/myCode.React/my_code/src/store/projects/sagas.js"],"names":["takeEvery","put","call","GET_USER_PROJECTS","CREATE_USER_PROJECT","putGottenUserProjects","putCreatedUserProject","addNotify","config","store","fetchGetProjectsData","data","USER_TOKEN","getState","auth","token","fetch","URL_PROJECT_API","method","headers","then","response","status","ok","json","Promise","reject","catch","e","console","error","fetchCreateProjectsData","project","body","workerGetProjectsData","action","payload","log","success","workerCreateProjectsData","watchGetProjectsData","watchCreateProjectsData"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,GAAnB,EAAwBC,IAAxB,QAAmC,oBAAnC;AACA,SACEC,iBADF,EAEEC,mBAFF,EAGEC,qBAHF,EAIEC,qBAJF,QAKO,WALP;AAMA,SAAQC,SAAR,QAAwB,mBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,WAAxB;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAEA,SAASC,oBAAT,CAA8BC,IAA9B,EAAoC;AAClC,QAAMC,UAAU,GAAGH,KAAK,CAACI,QAAN,GAAiBC,IAAjB,CAAsBC,KAAzC;AAEA,SAAOC,KAAK,CAACR,MAAM,CAACS,eAAR,EAAyB;AACnCC,IAAAA,MAAM,EAAE,KAD2B;AAEnCC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB,mCAFT;AAGP,uBAAkB,UAASP,UAAW;AAH/B;AAF0B,GAAzB,CAAL,CAQJQ,IARI,CAQCC,QAAQ,IAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAnB,IAA0BD,QAAQ,CAACE,EAAnC,GAAwCF,QAAQ,CAACG,IAAT,EAAxC,GAA0DC,OAAO,CAACC,MAAR,CAAeL,QAAf,CARvE,EASJM,KATI,CASGC,CAAD,IAAOC,OAAO,CAACC,KAAR,CAAcF,CAAd,CATT,CAAP;AAWD;;AAED,SAASG,uBAAT,CAAiCpB,IAAjC,EAAuC;AACrC,QAAMC,UAAU,GAAGH,KAAK,CAACI,QAAN,GAAiBC,IAAjB,CAAsBC,KAAzC;AACA,QAAMiB,OAAO,GAAGrB,IAAhB;AAGA,SAAOK,KAAK,CAACR,MAAM,CAACS,eAAR,EAAyB;AACnCC,IAAAA,MAAM,EAAE,MAD2B;AAEnCe,IAAAA,IAAI,EAAED,OAF6B;AAGnCb,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAGP,uBAAkB,UAASP,UAAW;AAH/B;AAH0B,GAAzB,CAAL,CASJQ,IATI,CASCC,QAAQ,IAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAnB,IAA0BD,QAAQ,CAACE,EAAnC,GAAwCF,QAAQ,CAACG,IAAT,EAAxC,GAA0DC,OAAO,CAACC,MAAR,CAAeL,QAAf,CATvE,EAUJM,KAVI,CAUGC,CAAD,IAAOC,OAAO,CAACC,KAAR,CAAcF,CAAd,CAVT,CAAP;AAYD;;AAED,UAAUM,qBAAV,CAAgCC,MAAhC,EAAwC;AAEvC,QAAMxB,IAAI,GAAG,MAAMT,IAAI,CAACQ,oBAAD,EAAuByB,MAAM,CAACC,OAA9B,CAAvB;AACCP,EAAAA,OAAO,CAACQ,GAAR,CAAY1B,IAAZ;AACD,MAAIA,IAAI,CAAC2B,OAAT,EACG,MAAMrC,GAAG,CAACI,qBAAqB,CAACM,IAAD,CAAtB,CAAT;AAEH;;AAED,UAAU4B,wBAAV,CAAmCJ,MAAnC,EAA2C;AAE1C,QAAMxB,IAAI,GAAG,MAAMT,IAAI,CAAC6B,uBAAD,EAA0BI,MAAM,CAACC,OAAjC,CAAvB;AACCP,EAAAA,OAAO,CAACQ,GAAR,CAAY1B,IAAZ;AACD,MAAIA,IAAI,CAAC2B,OAAT,EACG,MAAMrC,GAAG,CAACK,qBAAqB,CAACK,IAAD,CAAtB,CAAT;AAEH;;AAGD,OAAO,UAAU6B,oBAAV,GAAiC;AACtC,QAAMxC,SAAS,CAACG,iBAAD,EAAoB+B,qBAApB,CAAf;AACD;AAED,OAAO,UAAUO,uBAAV,GAAoC;AACzCZ,EAAAA,OAAO,CAACQ,GAAR,CAAY,WAAZ,EAAyBjC,mBAAzB;AACA,QAAMJ,SAAS,CAACI,mBAAD,EAAsBmC,wBAAtB,CAAf;AACD","sourcesContent":["import {takeEvery, put, call} from 'redux-saga/effects';\r\nimport {\r\n  GET_USER_PROJECTS,\r\n  CREATE_USER_PROJECT,\r\n  putGottenUserProjects,\r\n  putCreatedUserProject\r\n} from './actions';\r\nimport {addNotify} from '../notify/actions';\r\nimport * as config from '../config';\r\nimport store from '../index';\r\n\r\nfunction fetchGetProjectsData(data) {\r\n  const USER_TOKEN = store.getState().auth.token;\r\n\r\n  return fetch(config.URL_PROJECT_API, { \r\n    method: 'GET', \r\n    headers: {      \r\n      'Accept': 'application/json',\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n      'Authorization': `Bearer ${USER_TOKEN}`\r\n    },\r\n  })\r\n    .then(response => response.status == 404 || response.ok ? response.json() : Promise.reject(response))\r\n    .catch((e) => console.error(e));\r\n  \r\n}\r\n\r\nfunction fetchCreateProjectsData(data) {\r\n  const USER_TOKEN = store.getState().auth.token;\r\n  const project = data;\r\n\r\n\r\n  return fetch(config.URL_PROJECT_API, { \r\n    method: 'POST', \r\n    body: project,\r\n    headers: {      \r\n      'Accept': 'application/json',\r\n      \r\n      'Authorization': `Bearer ${USER_TOKEN}`\r\n    },\r\n  })\r\n    .then(response => response.status == 404 || response.ok ? response.json() : Promise.reject(response))\r\n    .catch((e) => console.error(e));\r\n  \r\n}\r\n\r\nfunction* workerGetProjectsData(action) {\r\n  \r\n\tconst data = yield call(fetchGetProjectsData, action.payload);\r\n  console.log(data);\r\n\tif (data.success) \t\r\n    yield put(putGottenUserProjects(data));\r\n\r\n}\r\n\r\nfunction* workerCreateProjectsData(action) {\r\n  \r\n\tconst data = yield call(fetchCreateProjectsData, action.payload);\r\n  console.log(data);\r\n\tif (data.success) \t\r\n    yield put(putCreatedUserProject(data));\r\n\r\n}\r\n\r\n\r\nexport function* watchGetProjectsData() {\r\n  yield takeEvery(GET_USER_PROJECTS, workerGetProjectsData);\r\n}\r\n\r\nexport function* watchCreateProjectsData() {\r\n  console.log('watcher: ', CREATE_USER_PROJECT)\r\n  yield takeEvery(CREATE_USER_PROJECT, workerCreateProjectsData);\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}