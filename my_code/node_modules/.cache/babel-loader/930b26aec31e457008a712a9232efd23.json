{"ast":null,"code":"import { PUT_GOTTEN_USER_PROJECTS, PUT_GOTTEN_OTHER_PROJECTS, PUT_CREATED_USER_PROJECT, PUT_DELETED_USER_PROJECT, PUT_ADDED_USER_IN_PROJECT, PUT_DELETED_USER_IN_PROJECT } from './actions';\nimport store from '../index';\nconst initialState = {\n  myProjects: {},\n  otherProjects: {}\n};\nexport const projectsReduser = (state = initialState, action) => {\n  switch (action.type) {\n    case PUT_GOTTEN_USER_PROJECTS:\n      return {\n        myProjects: action.payload\n      };\n\n    case PUT_GOTTEN_OTHER_PROJECTS:\n      return {\n        otherProjects: { ...action.payload,\n          data: action.payload.data.map(project => project)\n        }\n      };\n\n    case PUT_CREATED_USER_PROJECT:\n      return {\n        myProjects: { ...state.myProjects,\n          data: [...state.myProjects.data, action.payload]\n        }\n      };\n\n    case PUT_DELETED_USER_PROJECT:\n      return {\n        myProjects: { ...state.myProjects,\n          data: state.myProjects.data.filter(project => project.id !== action.payload.data.id)\n        }\n      };\n\n    case PUT_ADDED_USER_IN_PROJECT:\n      let dataWithAddedUser = state.myProjects.data.map(project => {\n        if (project.id === action.payload.data['project_user']['project_id']) return { ...project,\n          users: [...(project.users || []), action.payload.data.user]\n        };\n        return project;\n      });\n      return {\n        myProjects: { ...state.myProjects,\n          data: dataWithAddedUser\n        }\n      };\n\n    case PUT_DELETED_USER_IN_PROJECT:\n      let dataWithOutAddedUser = state.myProjects.data.map(project => {\n        if (project.id == action.payload.data['project_id']) {\n          return { ...project,\n            users: project.users.filter(user => user.id != action.payload.data['user_id'])\n          };\n        }\n\n        return project;\n      });\n      return {\n        myProjects: { ...state.myProjects,\n          data: dataWithOutAddedUser\n        }\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/limon/Desktop/my projects/myCode/myCode.React/my_code/src/store/projects/reducers.js"],"names":["PUT_GOTTEN_USER_PROJECTS","PUT_GOTTEN_OTHER_PROJECTS","PUT_CREATED_USER_PROJECT","PUT_DELETED_USER_PROJECT","PUT_ADDED_USER_IN_PROJECT","PUT_DELETED_USER_IN_PROJECT","store","initialState","myProjects","otherProjects","projectsReduser","state","action","type","payload","data","map","project","filter","id","dataWithAddedUser","users","user","dataWithOutAddedUser"],"mappings":"AAAA,SACEA,wBADF,EAEEC,yBAFF,EAGEC,wBAHF,EAIEC,wBAJF,EAKEC,yBALF,EAMEC,2BANF,QAOO,WAPP;AASA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,EADO;AAEnBC,EAAAA,aAAa,EAAE;AAFI,CAArB;AAKA,OAAO,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAC/D,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKb,wBAAL;AACE,aAAQ;AACNQ,QAAAA,UAAU,EAAEI,MAAM,CAACE;AADb,OAAR;;AAIF,SAAKb,yBAAL;AACE,aAAQ;AACNQ,QAAAA,aAAa,EAAE,EACb,GAAGG,MAAM,CAACE,OADG;AAEbC,UAAAA,IAAI,EAAEH,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBC,GAApB,CACJC,OAAO,IAAIA,OADP;AAFO;AADT,OAAR;;AASF,SAAKf,wBAAL;AACE,aAAQ;AACNM,QAAAA,UAAU,EAAE,EAAC,GAAGG,KAAK,CAACH,UAAV;AAAsBO,UAAAA,IAAI,EAAE,CAAC,GAAGJ,KAAK,CAACH,UAAN,CAAiBO,IAArB,EAA2BH,MAAM,CAACE,OAAlC;AAA5B;AADN,OAAR;;AAIF,SAAKX,wBAAL;AACE,aAAQ;AACNK,QAAAA,UAAU,EAAE,EACV,GAAGG,KAAK,CAACH,UADC;AAEVO,UAAAA,IAAI,EAAEJ,KAAK,CAACH,UAAN,CAAiBO,IAAjB,CAAsBG,MAAtB,CAA6BD,OAAO,IAAIA,OAAO,CAACE,EAAR,KAAeP,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBI,EAA3E;AAFI;AADN,OAAR;;AAOF,SAAKf,yBAAL;AACE,UAAIgB,iBAAiB,GAAGT,KAAK,CAACH,UAAN,CAAiBO,IAAjB,CAAsBC,GAAtB,CAA0BC,OAAO,IAAI;AAE3D,YAAIA,OAAO,CAACE,EAAR,KAAeP,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoB,cAApB,EAAoC,YAApC,CAAnB,EACE,OAAO,EAAC,GAAGE,OAAJ;AAAaI,UAAAA,KAAK,EAAE,CAAC,IAAGJ,OAAO,CAACI,KAAR,IAAiB,EAApB,CAAD,EAAyBT,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBO,IAA7C;AAApB,SAAP;AAEF,eAAOL,OAAP;AACD,OANuB,CAAxB;AASA,aAAQ;AAAET,QAAAA,UAAU,EAAE,EAAC,GAAGG,KAAK,CAACH,UAAV;AAAsBO,UAAAA,IAAI,EAAEK;AAA5B;AAAd,OAAR;;AAGF,SAAKf,2BAAL;AACE,UAAIkB,oBAAoB,GAAGZ,KAAK,CAACH,UAAN,CAAiBO,IAAjB,CAAsBC,GAAtB,CAA0BC,OAAO,IAAI;AAE9D,YAAIA,OAAO,CAACE,EAAR,IAAcP,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoB,YAApB,CAAlB,EAAqD;AACnD,iBAAO,EAAC,GAAGE,OAAJ;AAAaI,YAAAA,KAAK,EAAEJ,OAAO,CAACI,KAAR,CAAcH,MAAd,CAAqBI,IAAI,IAAIA,IAAI,CAACH,EAAL,IAAWP,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoB,SAApB,CAAxC;AAApB,WAAP;AACD;;AAED,eAAOE,OAAP;AACD,OAP0B,CAA3B;AAQA,aAAQ;AAAET,QAAAA,UAAU,EAAE,EAAC,GAAGG,KAAK,CAACH,UAAV;AAAsBO,UAAAA,IAAI,EAAEQ;AAA5B;AAAd,OAAR;;AAGF;AAAS,aAAOZ,KAAP;AAvDX;AAyDD,CA1DM","sourcesContent":["import { \r\n  PUT_GOTTEN_USER_PROJECTS,\r\n  PUT_GOTTEN_OTHER_PROJECTS,\r\n  PUT_CREATED_USER_PROJECT,\r\n  PUT_DELETED_USER_PROJECT,\r\n  PUT_ADDED_USER_IN_PROJECT,\r\n  PUT_DELETED_USER_IN_PROJECT,\r\n} from './actions';\r\n\r\nimport store from '../index';\r\n\r\nconst initialState = {\r\n  myProjects: {},\r\n  otherProjects: {}\r\n};\r\n\r\nexport const projectsReduser = (state = initialState, action) => {\r\n  switch (action.type) {\r\n\r\n    case PUT_GOTTEN_USER_PROJECTS: \r\n      return ({ \r\n        myProjects: action.payload\r\n      });\r\n    \r\n    case PUT_GOTTEN_OTHER_PROJECTS: \r\n      return ({ \r\n        otherProjects: {\r\n          ...action.payload, \r\n          data: action.payload.data.map(\r\n            project => project\r\n          )\r\n        }\r\n      });\r\n\r\n    case PUT_CREATED_USER_PROJECT: \r\n      return ({\r\n        myProjects: {...state.myProjects, data: [...state.myProjects.data, action.payload]}\r\n      });\r\n\r\n    case PUT_DELETED_USER_PROJECT: \r\n      return ({\r\n        myProjects: { \r\n          ...state.myProjects, \r\n          data: state.myProjects.data.filter(project => project.id !== action.payload.data.id)\r\n        }\r\n      });\r\n    \r\n    case PUT_ADDED_USER_IN_PROJECT: \r\n      let dataWithAddedUser = state.myProjects.data.map(project => {\r\n        \r\n        if (project.id === action.payload.data['project_user']['project_id']) \r\n          return {...project, users: [...project.users || [], action.payload.data.user]}\r\n        \r\n        return project;\r\n      });\r\n    \r\n\r\n      return ({ myProjects: {...state.myProjects, data: dataWithAddedUser}});\r\n     \r\n\r\n    case PUT_DELETED_USER_IN_PROJECT: \r\n      let dataWithOutAddedUser = state.myProjects.data.map(project => {\r\n        \r\n        if (project.id == action.payload.data['project_id']) {\r\n          return {...project, users: project.users.filter(user => user.id != action.payload.data['user_id'])}\r\n        }\r\n        \r\n        return project;\r\n      });\r\n      return ({ myProjects: {...state.myProjects, data: dataWithOutAddedUser}});\r\n\r\n    \r\n    default: return state;  \r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}