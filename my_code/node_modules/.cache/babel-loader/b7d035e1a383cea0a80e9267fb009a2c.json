{"ast":null,"code":"import { takeEvery, put, call } from 'redux-saga/effects';\nimport { SEND_REGISTER_DATA, GET_USER_DATA, SEND_LOGIN_DATA, putAuthData, putUserData, putFailedAuthData } from './actions';\nimport { addNotify } from '../../store/notify/actions';\nimport * as config from '../config';\nimport fetchWithAuth from '../fetchWithAuth'; // Workers\n\nfunction* workerRegisterData(action) {\n  const response = yield fetchWithAuth(config.URL_REGISTER_API, 'POST', action.payload);\n  if (response && response.success === true) yield put(putAuthData(response));else yield put(putFailedAuthData(response));\n}\n\nfunction* workerLoginData(action) {\n  const newData = {\n    username: action.payload.email,\n    password: action.payload.password,\n    grant_type: 'password',\n    client_id: config.CLIENT_ID,\n    client_secret: config.CLIENT_SECRET\n  };\n  const respnse = yield fetchWithAuth(config.URL_LOGIN_API, 'POST', newData);\n  if (respnse) yield put(putAuthData(respnse));else yield put(putFailedAuthData(respnse));\n}\n\nfunction* workerGetUserData(action) {\n  const response = yield fetchWithAuth(config.URL_USER_API);\n  addNotify({\n    message: response.id\n  });\n  console.log(response);\n  if (response && response.success === true) yield put(putUserData(response));else addNotify({\n    message: 'Ошибка - данные пользователя не получены'\n  });\n} // Wathcers\n\n\nexport function* watchRegisterData() {\n  yield takeEvery(SEND_REGISTER_DATA, workerRegisterData);\n}\nexport function* watchLoginData() {\n  yield takeEvery(SEND_LOGIN_DATA, workerLoginData);\n}\nexport function* watchGetUserData() {\n  yield takeEvery(GET_USER_DATA, workerGetUserData);\n}","map":{"version":3,"sources":["C:/Users/limon/Desktop/my projects/myCode/myCode.React/my_code/src/store/auth/sagas.js"],"names":["takeEvery","put","call","SEND_REGISTER_DATA","GET_USER_DATA","SEND_LOGIN_DATA","putAuthData","putUserData","putFailedAuthData","addNotify","config","fetchWithAuth","workerRegisterData","action","response","URL_REGISTER_API","payload","success","workerLoginData","newData","username","email","password","grant_type","client_id","CLIENT_ID","client_secret","CLIENT_SECRET","respnse","URL_LOGIN_API","workerGetUserData","URL_USER_API","message","id","console","log","watchRegisterData","watchLoginData","watchGetUserData"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,GAApB,EAAyBC,IAAzB,QAAqC,oBAArC;AACA,SACCC,kBADD,EAECC,aAFD,EAGCC,eAHD,EAICC,WAJD,EAKCC,WALD,EAMCC,iBAND,QAOO,WAPP;AASA,SAASC,SAAT,QAA0B,4BAA1B;AACA,OAAO,KAAKC,MAAZ,MAAwB,WAAxB;AACA,OAAOC,aAAP,MAA0B,kBAA1B,C,CAEA;;AACA,UAAUC,kBAAV,CAA6BC,MAA7B,EAAqC;AAEpC,QAAMC,QAAQ,GAAG,MAAMH,aAAa,CAACD,MAAM,CAACK,gBAAR,EAA0B,MAA1B,EAAkCF,MAAM,CAACG,OAAzC,CAApC;AAEA,MAAIF,QAAQ,IAAIA,QAAQ,CAACG,OAAT,KAAqB,IAArC,EACC,MAAMhB,GAAG,CAACK,WAAW,CAACQ,QAAD,CAAZ,CAAT,CADD,KAGC,MAAMb,GAAG,CAACO,iBAAiB,CAACM,QAAD,CAAlB,CAAT;AACD;;AAED,UAAUI,eAAV,CAA0BL,MAA1B,EAAkC;AACjC,QAAMM,OAAO,GAAG;AACfC,IAAAA,QAAQ,EAAEP,MAAM,CAACG,OAAP,CAAeK,KADV;AAEfC,IAAAA,QAAQ,EAAET,MAAM,CAACG,OAAP,CAAeM,QAFV;AAGfC,IAAAA,UAAU,EAAE,UAHG;AAIfC,IAAAA,SAAS,EAAEd,MAAM,CAACe,SAJH;AAKfC,IAAAA,aAAa,EAAEhB,MAAM,CAACiB;AALP,GAAhB;AAQA,QAAMC,OAAO,GAAG,MAAMjB,aAAa,CAACD,MAAM,CAACmB,aAAR,EAAuB,MAAvB,EAA+BV,OAA/B,CAAnC;AAEA,MAAIS,OAAJ,EACC,MAAM3B,GAAG,CAACK,WAAW,CAACsB,OAAD,CAAZ,CAAT,CADD,KAGC,MAAM3B,GAAG,CAACO,iBAAiB,CAACoB,OAAD,CAAlB,CAAT;AACD;;AAED,UAAUE,iBAAV,CAA4BjB,MAA5B,EAAoC;AAEnC,QAAMC,QAAQ,GAAG,MAAMH,aAAa,CAACD,MAAM,CAACqB,YAAR,CAApC;AAEAtB,EAAAA,SAAS,CAAC;AAACuB,IAAAA,OAAO,EAAElB,QAAQ,CAACmB;AAAnB,GAAD,CAAT;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYrB,QAAZ;AACA,MAAIA,QAAQ,IAAIA,QAAQ,CAACG,OAAT,KAAqB,IAArC,EACC,MAAMhB,GAAG,CAACM,WAAW,CAACO,QAAD,CAAZ,CAAT,CADD,KAGCL,SAAS,CAAC;AAACuB,IAAAA,OAAO,EAAE;AAAV,GAAD,CAAT;AACD,C,CAGD;;;AACA,OAAO,UAAUI,iBAAV,GAA8B;AACpC,QAAMpC,SAAS,CAACG,kBAAD,EAAqBS,kBAArB,CAAf;AACA;AAED,OAAO,UAAUyB,cAAV,GAA2B;AACjC,QAAMrC,SAAS,CAACK,eAAD,EAAkBa,eAAlB,CAAf;AACA;AAED,OAAO,UAAUoB,gBAAV,GAA6B;AACnC,QAAMtC,SAAS,CAACI,aAAD,EAAgB0B,iBAAhB,CAAf;AACA","sourcesContent":["import { takeEvery, put, call } from 'redux-saga/effects';\r\nimport { \r\n\tSEND_REGISTER_DATA, \r\n\tGET_USER_DATA,\r\n\tSEND_LOGIN_DATA, \r\n\tputAuthData, \r\n\tputUserData,\r\n\tputFailedAuthData \r\n} from './actions';\r\n\r\nimport { addNotify } from '../../store/notify/actions';\r\nimport * as config from '../config';\r\nimport fetchWithAuth from '../fetchWithAuth';\r\n\r\n// Workers\r\nfunction* workerRegisterData(action) {\r\n\t\r\n\tconst response = yield fetchWithAuth(config.URL_REGISTER_API, 'POST', action.payload);\r\n\r\n\tif (response && response.success === true) \t\r\n\t\tyield put(putAuthData(response));\r\n\telse \r\n\t\tyield put(putFailedAuthData(response));\r\n}\r\n\r\nfunction* workerLoginData(action) {\r\n\tconst newData = {\r\n\t\tusername: action.payload.email,\r\n\t\tpassword: action.payload.password,\r\n\t\tgrant_type: 'password',\r\n\t\tclient_id: config.CLIENT_ID,\r\n\t\tclient_secret: config.CLIENT_SECRET\r\n\t}\r\n\r\n\tconst respnse = yield fetchWithAuth(config.URL_LOGIN_API, 'POST', newData);\r\n\t\r\n\tif (respnse) \t\r\n\t\tyield put(putAuthData(respnse));\r\n\telse \r\n\t\tyield put(putFailedAuthData(respnse));\r\n}\r\n\r\nfunction* workerGetUserData(action) {\r\n\t\r\n\tconst response = yield fetchWithAuth(config.URL_USER_API);\r\n\t\r\n\taddNotify({message: response.id});\r\n\tconsole.log(response)\r\n\tif (response && response.success === true) \t\r\n\t\tyield put(putUserData(response));\r\n\telse \r\n\t\taddNotify({message: 'Ошибка - данные пользователя не получены'});\r\n}\r\n\r\n\r\n// Wathcers\r\nexport function* watchRegisterData() {\r\n\tyield takeEvery(SEND_REGISTER_DATA, workerRegisterData);\r\n}\r\n\r\nexport function* watchLoginData() {\r\n\tyield takeEvery(SEND_LOGIN_DATA, workerLoginData);\r\n}\r\n\r\nexport function* watchGetUserData() {\r\n\tyield takeEvery(GET_USER_DATA, workerGetUserData);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}