{"ast":null,"code":"import { takeEvery, put, call } from 'redux-saga/effects';\nimport { SEND_REGISTER_DATA, SEND_LOGIN_DATA, putAuthData, putFailedAuthData } from './actions';\nimport { addNotify } from '../notify/actions';\nimport * as config from '../config';\n\nfunction fetchRegisterData(data) {\n  return fetch(config.URL_REGISTER_API, {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(response => response.status == 404 || response.ok ? response.json() : Promise.reject(response)).catch(e => console.error(e));\n}\n\nfunction fetchLoginData(data) {\n  const newData = {\n    username: data.email,\n    password: data.password,\n    grant_type: 'password',\n    client_id: config.CLIENT_ID,\n    client_secret: config.CLIENT_SECRET\n  };\n  console.log(JSON.stringify(newData));\n  return fetch(config.URL_LOGIN_API, {\n    method: 'POST',\n    body: JSON.stringify(newData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(response => response.status == 404 || response.ok ? response.json() : Promise.reject(response)).catch(e => console.error(e));\n}\n\nfunction* workerRegisterData(action) {\n  const data = yield call(fetchRegisterData, action.payload);\n  if (data.success) yield put(putAuthData(data));else yield put(putFailedAuthData(data));\n}\n\nfunction* workerLoginData(action) {\n  const data = yield call(fetchLoginData, action.payload);\n  if (data) yield put(putAuthData(data));else yield put(putFailedAuthData(data));\n}\n\nexport function* watchRegisterData() {\n  yield takeEvery(SEND_REGISTER_DATA, workerRegisterData);\n}\nexport function* watchLoginData() {\n  yield takeEvery(SEND_LOGIN_DATA, workerLoginData);\n} // export function* watchRegisterPutData() {\n//   yield takeEvery(PUT_REGISTER_DATA, workerRegisterData);\n// }","map":{"version":3,"sources":["C:/Users/limon/Desktop/my projects/myCode/myCode.React/my_code/src/store/auth/sagas.js"],"names":["takeEvery","put","call","SEND_REGISTER_DATA","SEND_LOGIN_DATA","putAuthData","putFailedAuthData","addNotify","config","fetchRegisterData","data","fetch","URL_REGISTER_API","method","body","JSON","stringify","headers","then","response","status","ok","json","Promise","reject","catch","e","console","error","fetchLoginData","newData","username","email","password","grant_type","client_id","CLIENT_ID","client_secret","CLIENT_SECRET","log","URL_LOGIN_API","workerRegisterData","action","payload","success","workerLoginData","watchRegisterData","watchLoginData"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,GAApB,EAAyBC,IAAzB,QAAqC,oBAArC;AACA,SAASC,kBAAT,EAA6BC,eAA7B,EAA8CC,WAA9C,EAA2DC,iBAA3D,QAAoF,WAApF;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,OAAO,KAAKC,MAAZ,MAAwB,WAAxB;;AAGA,SAASC,iBAAT,CAA2BC,IAA3B,EAAiC;AAE/B,SAAOC,KAAK,CAACH,MAAM,CAACI,gBAAR,EAA0B;AACpCC,IAAAA,MAAM,EAAE,MAD4B;AAEpCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAF8B;AAGpCO,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAH2B,GAA1B,CAAL,CAOJC,IAPI,CAOCC,QAAQ,IAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAnB,IAA0BD,QAAQ,CAACE,EAAnC,GAAwCF,QAAQ,CAACG,IAAT,EAAxC,GAA0DC,OAAO,CAACC,MAAR,CAAeL,QAAf,CAPvE,EAQJM,KARI,CAQGC,CAAD,IAAOC,OAAO,CAACC,KAAR,CAAcF,CAAd,CART,CAAP;AAWD;;AAGD,SAASG,cAAT,CAAwBnB,IAAxB,EAA8B;AAE5B,QAAMoB,OAAO,GAAG;AACdC,IAAAA,QAAQ,EAAErB,IAAI,CAACsB,KADD;AAEdC,IAAAA,QAAQ,EAAEvB,IAAI,CAACuB,QAFD;AAGdC,IAAAA,UAAU,EAAE,UAHE;AAIdC,IAAAA,SAAS,EAAE3B,MAAM,CAAC4B,SAJJ;AAKdC,IAAAA,aAAa,EAAE7B,MAAM,CAAC8B;AALR,GAAhB;AAQAX,EAAAA,OAAO,CAACY,GAAR,CAAYxB,IAAI,CAACC,SAAL,CAAec,OAAf,CAAZ;AAEA,SAAOnB,KAAK,CAACH,MAAM,CAACgC,aAAR,EAAuB;AACjC3B,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAec,OAAf,CAF2B;AAGjCb,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAHwB,GAAvB,CAAL,CAOJC,IAPI,CAOCC,QAAQ,IAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAnB,IAA0BD,QAAQ,CAACE,EAAnC,GAAwCF,QAAQ,CAACG,IAAT,EAAxC,GAA0DC,OAAO,CAACC,MAAR,CAAeL,QAAf,CAPvE,EAQJM,KARI,CAQGC,CAAD,IAAOC,OAAO,CAACC,KAAR,CAAcF,CAAd,CART,CAAP;AASD;;AAED,UAAUe,kBAAV,CAA6BC,MAA7B,EAAqC;AAEpC,QAAMhC,IAAI,GAAG,MAAMR,IAAI,CAACO,iBAAD,EAAoBiC,MAAM,CAACC,OAA3B,CAAvB;AAEA,MAAIjC,IAAI,CAACkC,OAAT,EACG,MAAM3C,GAAG,CAACI,WAAW,CAACK,IAAD,CAAZ,CAAT,CADH,KAGG,MAAMT,GAAG,CAACK,iBAAiB,CAACI,IAAD,CAAlB,CAAT;AAGH;;AAED,UAAUmC,eAAV,CAA0BH,MAA1B,EAAkC;AACjC,QAAMhC,IAAI,GAAG,MAAMR,IAAI,CAAC2B,cAAD,EAAiBa,MAAM,CAACC,OAAxB,CAAvB;AAEA,MAAIjC,IAAJ,EACG,MAAMT,GAAG,CAACI,WAAW,CAACK,IAAD,CAAZ,CAAT,CADH,KAGG,MAAMT,GAAG,CAACK,iBAAiB,CAACI,IAAD,CAAlB,CAAT;AACH;;AAED,OAAO,UAAUoC,iBAAV,GAA8B;AACnC,QAAM9C,SAAS,CAACG,kBAAD,EAAqBsC,kBAArB,CAAf;AACD;AAED,OAAO,UAAUM,cAAV,GAA2B;AAChC,QAAM/C,SAAS,CAACI,eAAD,EAAkByC,eAAlB,CAAf;AACD,C,CAED;AACA;AACA","sourcesContent":["import { takeEvery, put, call } from 'redux-saga/effects';\r\nimport { SEND_REGISTER_DATA, SEND_LOGIN_DATA, putAuthData, putFailedAuthData } from './actions';\r\nimport { addNotify } from '../notify/actions';\r\nimport * as config from '../config';\r\n\r\n\r\nfunction fetchRegisterData(data) {\r\n\r\n  return fetch(config.URL_REGISTER_API, { \r\n    method: 'POST', \r\n    body: JSON.stringify(data),\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n  })\r\n    .then(response => response.status == 404 || response.ok ? response.json() : Promise.reject(response))\r\n    .catch((e) => console.error(e));\r\n  \r\n\r\n}\r\n\r\n\r\nfunction fetchLoginData(data) {\r\n\r\n  const newData = {\r\n    username: data.email,\r\n    password: data.password,\r\n    grant_type: 'password',\r\n    client_id: config.CLIENT_ID,\r\n    client_secret: config.CLIENT_SECRET\r\n  }\r\n\r\n  console.log(JSON.stringify(newData));\r\n\r\n  return fetch(config.URL_LOGIN_API, { \r\n    method: 'POST', \r\n    body: JSON.stringify(newData),\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n  })\r\n    .then(response => response.status == 404 || response.ok ? response.json() : Promise.reject(response))\r\n    .catch((e) => console.error(e));\r\n}\r\n\r\nfunction* workerRegisterData(action) {\r\n  \r\n\tconst data = yield call(fetchRegisterData, action.payload);\r\n  \r\n\tif (data.success) \t\r\n    yield put(putAuthData(data));\r\n  else \r\n    yield put(putFailedAuthData(data));\r\n\t\r\n  \r\n}\r\n\r\nfunction* workerLoginData(action) {\r\n\tconst data = yield call(fetchLoginData, action.payload);\r\n  \r\n\tif (data) \t\r\n    yield put(putAuthData(data));\r\n  else \r\n    yield put(putFailedAuthData(data));\r\n}\r\n\r\nexport function* watchRegisterData() {\r\n  yield takeEvery(SEND_REGISTER_DATA, workerRegisterData);\r\n}\r\n\r\nexport function* watchLoginData() {\r\n  yield takeEvery(SEND_LOGIN_DATA, workerLoginData);\r\n}\r\n\r\n// export function* watchRegisterPutData() {\r\n//   yield takeEvery(PUT_REGISTER_DATA, workerRegisterData);\r\n// }"]},"metadata":{},"sourceType":"module"}