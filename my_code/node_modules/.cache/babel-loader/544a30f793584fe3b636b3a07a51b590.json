{"ast":null,"code":"import { takeEvery, put, call } from 'redux-saga/effects';\nimport { SEND_REGISTER_DATA, SEND_LOGIN_DATA, putRegisterData, putFailedRegisterData, putFailedLoginData, putLoginData } from './actions';\nimport { addNotify } from '../notify/actions';\nimport * as config from '../config';\n\nfunction fetchRegisterData(data) {\n  return fetch(config.URL_REGISTER_API, {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(response => response.status == 404 || response.ok ? response.json() : Promise.reject(response)).catch(e => console.error(e));\n}\n\nfunction fetchLoginData(data) {\n  const newData = {\n    username: data.email,\n    password: data.password,\n    grant_type: 'password',\n    client_id: config.CLIENT_ID,\n    client_secret: config.CLIENT_SECRET\n  };\n  console.log(JSON.stringify(newData));\n  return fetch(config.URL_LOGIN_API, {\n    method: 'POST',\n    body: JSON.stringify(newData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(response => response.status == 404 || response.ok ? response.json() : Promise.reject(response)).catch(e => console.error(e));\n}\n\nfunction* workerRegisterData(action) {\n  const data = yield call(fetchRegisterData, action.payload);\n  if (data.success) yield put(putRegisterData(data));else yield () => {\n    put(addNotify({\n      message: data.message,\n      id: data.message + Number(new Date()),\n      isVisible: true\n    }));\n    put(putFailedRegisterData(data));\n  };\n}\n\nfunction* workerLoginData(action) {\n  console.log('работает', action.payload);\n  const data = yield call(fetchLoginData, action.payload);\n  if (data) yield put(putLoginData({ ...data,\n    name: action.payload.email\n  }));else console.log('сейчас мы должны уведомить, шо все плохо');\n  yield () => {\n    put(putFailedLoginData(data));\n    put(addNotify({\n      message: 'Не верный Email или пароль',\n      id: data.message + Number(new Date()),\n      isVisible: true\n    }));\n  };\n}\n\nexport function* watchRegisterData() {\n  yield takeEvery(SEND_REGISTER_DATA, workerRegisterData);\n}\nexport function* watchLoginData() {\n  yield takeEvery(SEND_LOGIN_DATA, workerLoginData);\n}","map":{"version":3,"sources":["C:/Users/limon/Desktop/my projects/myCode/myCode.React/my_code/src/store/auth/sagas.js"],"names":["takeEvery","put","call","SEND_REGISTER_DATA","SEND_LOGIN_DATA","putRegisterData","putFailedRegisterData","putFailedLoginData","putLoginData","addNotify","config","fetchRegisterData","data","fetch","URL_REGISTER_API","method","body","JSON","stringify","headers","then","response","status","ok","json","Promise","reject","catch","e","console","error","fetchLoginData","newData","username","email","password","grant_type","client_id","CLIENT_ID","client_secret","CLIENT_SECRET","log","URL_LOGIN_API","workerRegisterData","action","payload","success","message","id","Number","Date","isVisible","workerLoginData","name","watchRegisterData","watchLoginData"],"mappings":"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","sourcesContent":["import { takeEvery, put, call } from 'redux-saga/effects';\r\nimport { SEND_REGISTER_DATA, SEND_LOGIN_DATA, putRegisterData, putFailedRegisterData, putFailedLoginData, putLoginData } from './actions';\r\nimport { addNotify } from '../notify/actions';\r\nimport * as config from '../config';\r\n\r\n\r\nfunction fetchRegisterData(data) {\r\n\r\n  return fetch(config.URL_REGISTER_API, { \r\n    method: 'POST', \r\n    body: JSON.stringify(data),\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n  })\r\n    .then(response => response.status == 404 || response.ok ? response.json() : Promise.reject(response))\r\n    .catch((e) => console.error(e));\r\n  \r\n\r\n}\r\n\r\n\r\nfunction fetchLoginData(data) {\r\n\r\n  const newData = {\r\n    username: data.email,\r\n    password: data.password,\r\n    grant_type: 'password',\r\n    client_id: config.CLIENT_ID,\r\n    client_secret: config.CLIENT_SECRET\r\n  }\r\n\r\n  console.log(JSON.stringify(newData));\r\n\r\n  return fetch(config.URL_LOGIN_API, { \r\n    method: 'POST', \r\n    body: JSON.stringify(newData),\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n  })\r\n    .then(response => response.status == 404 || response.ok ? response.json() : Promise.reject(response))\r\n    .catch((e) => console.error(e));\r\n  \r\n\r\n}\r\n\r\nfunction* workerRegisterData(action) {\r\n  \r\n\tconst data = yield call(fetchRegisterData, action.payload);\r\n  \r\n\tif (data.success) \t\r\n    yield put(putRegisterData(data));\r\n  else \r\n    yield () => {\r\n      put(addNotify({\r\n        message: data.message,\r\n        id: data.message + Number(new Date()),\r\n        isVisible: true\r\n      }));\r\n      \r\n      put(putFailedRegisterData(data));\r\n    }\r\n\t\r\n  \r\n}\r\n\r\nfunction* workerLoginData(action) {\r\n  console.log('работает', action.payload)\r\n\tconst data = yield call(fetchLoginData, action.payload);\r\n  \r\n\tif (data) \t\r\n    yield put(putLoginData({ ...data, name: action.payload.email }));\r\n  else \r\n    console.log('сейчас мы должны уведомить, шо все плохо')\r\n    yield () => {\r\n      put(putFailedLoginData(data));\r\n      put(addNotify({\r\n        message: 'Не верный Email или пароль',\r\n        id: data.message + Number(new Date()),\r\n        isVisible: true\r\n      })); \r\n      \r\n    };\r\n\t\r\n  \r\n}\r\n\r\nexport function* watchRegisterData() {\r\n  yield takeEvery(SEND_REGISTER_DATA, workerRegisterData);\r\n}\r\n\r\nexport function* watchLoginData() {\r\n  yield takeEvery(SEND_LOGIN_DATA, workerLoginData);\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}