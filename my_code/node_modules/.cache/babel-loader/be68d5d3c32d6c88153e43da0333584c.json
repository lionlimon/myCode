{"ast":null,"code":"import { PUT_GOTTEN_USER_PROJECTS, PUT_CREATED_USER_PROJECT, PUT_DELETED_USER_PROJECT, PUT_ADDED_USER_IN_PROJECT, PUT_DELETED_USER_IN_PROJECT } from './actions';\nconst initialState = {\n  myProjects: {}\n};\nexport const projectsReduser = (state = initialState, action) => {\n  switch (action.type) {\n    case PUT_GOTTEN_USER_PROJECTS:\n      return { ...state,\n        myProjects: action.payload\n      };\n\n    case PUT_CREATED_USER_PROJECT:\n      return { ...state,\n        myProjects: { ...state.myProjects,\n          data: [...state.myProjects.data, action.payload]\n        }\n      };\n\n    case PUT_DELETED_USER_PROJECT:\n      return { ...state,\n        myProjects: { ...state.myProjects,\n          data: state.myProjects.data.filter(project => project.id !== action.payload.data.id)\n        }\n      };\n\n    case PUT_ADDED_USER_IN_PROJECT:\n      let dataWithAddedUser = state.myProjects.data.map(project => {\n        if (project.id === action.payload.data['project_user']['project_id']) return { ...project,\n          users: [...project.users, action.payload.data.user]\n        };\n        return project;\n      });\n      return { ...state,\n        myProjects: { ...state.myProjects,\n          data: dataWithAddedUser\n        }\n      };\n      break;\n\n    case PUT_DELETED_USER_IN_PROJECT:\n      let dataWithOutAddedUser = state.myProjects.data.map(project => {\n        if (project.id === action.payload.data['project_id']) return { ...project,\n          users: [project.users.filter(user => user.id !== action.payload.data['user_id'])]\n        };\n        return project;\n      });\n      return { ...state,\n        myProjects: { ...state.myProjects,\n          data: dataWithOutAddedUser\n        }\n      };\n      break;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/limon/Desktop/my projects/myCode/myCode.React/my_code/src/store/projects/reducers.js"],"names":["PUT_GOTTEN_USER_PROJECTS","PUT_CREATED_USER_PROJECT","PUT_DELETED_USER_PROJECT","PUT_ADDED_USER_IN_PROJECT","PUT_DELETED_USER_IN_PROJECT","initialState","myProjects","projectsReduser","state","action","type","payload","data","filter","project","id","dataWithAddedUser","map","users","user","dataWithOutAddedUser"],"mappings":"AAAA,SACEA,wBADF,EAEEC,wBAFF,EAGEC,wBAHF,EAIEC,yBAJF,EAKEC,2BALF,QAMO,WANP;AAQA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE;AADO,CAArB;AAIA,OAAO,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAC/D,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKV,wBAAL;AAA+B,aAAQ,EACrC,GAAGQ,KADkC;AAErCF,QAAAA,UAAU,EAAEG,MAAM,CAACE;AAFkB,OAAR;;AAK/B,SAAKV,wBAAL;AAA+B,aAAQ,EACrC,GAAGO,KADkC;AAErCF,QAAAA,UAAU,EAAE,EAAC,GAAGE,KAAK,CAACF,UAAV;AAAsBM,UAAAA,IAAI,EAAE,CAAC,GAAGJ,KAAK,CAACF,UAAN,CAAiBM,IAArB,EAA2BH,MAAM,CAACE,OAAlC;AAA5B;AAFyB,OAAR;;AAK/B,SAAKT,wBAAL;AAA+B,aAAQ,EACrC,GAAGM,KADkC;AAEnCF,QAAAA,UAAU,EAAE,EACV,GAAGE,KAAK,CAACF,UADC;AAEVM,UAAAA,IAAI,EAAEJ,KAAK,CAACF,UAAN,CAAiBM,IAAjB,CAAsBC,MAAtB,CAA6BC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBG,EAA3E;AAFI;AAFuB,OAAR;;AAO/B,SAAKZ,yBAAL;AACE,UAAIa,iBAAiB,GAAGR,KAAK,CAACF,UAAN,CAAiBM,IAAjB,CAAsBK,GAAtB,CAA0BH,OAAO,IAAI;AAE3D,YAAIA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoB,cAApB,EAAoC,YAApC,CAAnB,EACE,OAAO,EAAC,GAAGE,OAAJ;AAAaI,UAAAA,KAAK,EAAE,CAAC,GAAGJ,OAAO,CAACI,KAAZ,EAAmBT,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBO,IAAvC;AAApB,SAAP;AAEF,eAAOL,OAAP;AACD,OANuB,CAAxB;AAQA,aAAQ,EAAC,GAAGN,KAAJ;AAAWF,QAAAA,UAAU,EAAE,EAAC,GAAGE,KAAK,CAACF,UAAV;AAAsBM,UAAAA,IAAI,EAAEI;AAA5B;AAAvB,OAAR;AACA;;AAEF,SAAKZ,2BAAL;AACE,UAAIgB,oBAAoB,GAAGZ,KAAK,CAACF,UAAN,CAAiBM,IAAjB,CAAsBK,GAAtB,CAA0BH,OAAO,IAAI;AAE9D,YAAIA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoB,YAApB,CAAnB,EACE,OAAO,EAAC,GAAGE,OAAJ;AAAaI,UAAAA,KAAK,EAAE,CAACJ,OAAO,CAACI,KAAR,CAAcL,MAAd,CAAqBM,IAAI,IAAIA,IAAI,CAACJ,EAAL,KAAYN,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoB,SAApB,CAAzC,CAAD;AAApB,SAAP;AAEA,eAAOE,OAAP;AACD,OANwB,CAA3B;AAQE,aAAQ,EAAC,GAAGN,KAAJ;AAAWF,QAAAA,UAAU,EAAE,EAAC,GAAGE,KAAK,CAACF,UAAV;AAAsBM,UAAAA,IAAI,EAAEQ;AAA5B;AAAvB,OAAR;AAEA;;AACJ;AAAS,aAAOZ,KAAP;AA3CX;AA6CD,CA9CM","sourcesContent":["import { \r\n  PUT_GOTTEN_USER_PROJECTS,\r\n  PUT_CREATED_USER_PROJECT,\r\n  PUT_DELETED_USER_PROJECT,\r\n  PUT_ADDED_USER_IN_PROJECT,\r\n  PUT_DELETED_USER_IN_PROJECT,\r\n} from './actions';\r\n\r\nconst initialState = {\r\n  myProjects: {},\r\n};\r\n\r\nexport const projectsReduser = (state = initialState, action) => {\r\n  switch (action.type) {\r\n\r\n    case PUT_GOTTEN_USER_PROJECTS: return ({\r\n      ...state, \r\n      myProjects: action.payload\r\n    });\r\n\r\n    case PUT_CREATED_USER_PROJECT: return ({\r\n      ...state, \r\n      myProjects: {...state.myProjects, data: [...state.myProjects.data, action.payload]}\r\n    });\r\n\r\n    case PUT_DELETED_USER_PROJECT: return ({\r\n      ...state, \r\n        myProjects: { \r\n          ...state.myProjects, \r\n          data: state.myProjects.data.filter(project => project.id !== action.payload.data.id)}\r\n      });\r\n    \r\n    case PUT_ADDED_USER_IN_PROJECT: \r\n      let dataWithAddedUser = state.myProjects.data.map(project => {\r\n        \r\n        if (project.id === action.payload.data['project_user']['project_id']) \r\n          return {...project, users: [...project.users, action.payload.data.user]}\r\n        \r\n        return project;\r\n      });\r\n      \r\n      return ({...state, myProjects: {...state.myProjects, data: dataWithAddedUser}});\r\n      break;\r\n\r\n    case PUT_DELETED_USER_IN_PROJECT: \r\n      let dataWithOutAddedUser = state.myProjects.data.map(project => {\r\n          \r\n        if (project.id === action.payload.data['project_id']) \r\n          return {...project, users: [project.users.filter(user => user.id !== action.payload.data['user_id'])]}\r\n          \r\n          return project;\r\n        });\r\n        \r\n        return ({...state, myProjects: {...state.myProjects, data: dataWithOutAddedUser}});\r\n  \r\n        break;\r\n    default: return state;  \r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}