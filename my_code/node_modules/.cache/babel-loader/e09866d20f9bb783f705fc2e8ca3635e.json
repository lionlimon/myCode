{"ast":null,"code":"import { takeEvery, put, call } from 'redux-saga/effects';\nimport { SEND_REGISTER_DATA, SEND_LOGIN_DATA, putAuthData, putFailedAuthData } from './actions';\nimport * as config from '../config';\n\nfunction fetchRegisterData(data) {\n  return fetch(config.URL_REGISTER_API, {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(response => response.status === 404 || response.ok ? response.json() : Promise.reject(response)).catch(e => console.error(e));\n}\n\nfunction fetchLoginData(data) {\n  const newData = {\n    username: data.email,\n    password: data.password,\n    grant_type: 'password',\n    client_id: config.CLIENT_ID,\n    client_secret: config.CLIENT_SECRET\n  };\n  return fetch(config.URL_LOGIN_API, {\n    method: 'POST',\n    body: JSON.stringify(newData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(response => response.status === 404 || response.ok ? response.json() : Promise.reject(response)).catch(e => console.error(e));\n}\n\nfunction* workerRegisterData(action) {\n  const data = yield call(fetchRegisterData, action.payload);\n  if (data) yield put(putAuthData(data));else yield put(putFailedAuthData(data));\n}\n\nfunction* workerLoginData(action) {\n  const data = yield call(fetchLoginData, action.payload);\n  if (data) yield put(putAuthData(data));else yield put(putFailedAuthData(data));\n}\n\nexport function* watchRegisterData() {\n  yield takeEvery(SEND_REGISTER_DATA, workerRegisterData);\n}\nexport function* watchLoginData() {\n  yield takeEvery(SEND_LOGIN_DATA, workerLoginData);\n}","map":{"version":3,"sources":["C:/Users/limon/Desktop/my projects/myCode/myCode.React/my_code/src/store/auth/sagas.js"],"names":["takeEvery","put","call","SEND_REGISTER_DATA","SEND_LOGIN_DATA","putAuthData","putFailedAuthData","config","fetchRegisterData","data","fetch","URL_REGISTER_API","method","body","JSON","stringify","headers","then","response","status","ok","json","Promise","reject","catch","e","console","error","fetchLoginData","newData","username","email","password","grant_type","client_id","CLIENT_ID","client_secret","CLIENT_SECRET","URL_LOGIN_API","workerRegisterData","action","payload","workerLoginData","watchRegisterData","watchLoginData"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,GAApB,EAAyBC,IAAzB,QAAqC,oBAArC;AACA,SAASC,kBAAT,EAA6BC,eAA7B,EAA8CC,WAA9C,EAA2DC,iBAA3D,QAAoF,WAApF;AAEA,OAAO,KAAKC,MAAZ,MAAwB,WAAxB;;AAGA,SAASC,iBAAT,CAA2BC,IAA3B,EAAiC;AAEhC,SAAOC,KAAK,CAACH,MAAM,CAACI,gBAAR,EAA0B;AACrCC,IAAAA,MAAM,EAAE,MAD6B;AAErCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAF+B;AAGrCO,IAAAA,OAAO,EAAE;AACR,sBAAgB;AADR;AAH4B,GAA1B,CAAL,CAOLC,IAPK,CAOAC,QAAQ,IAAIA,QAAQ,CAACC,MAAT,KAAoB,GAApB,IAA2BD,QAAQ,CAACE,EAApC,GAAyCF,QAAQ,CAACG,IAAT,EAAzC,GAA2DC,OAAO,CAACC,MAAR,CAAeL,QAAf,CAPvE,EAQLM,KARK,CAQEC,CAAD,IAAOC,OAAO,CAACC,KAAR,CAAcF,CAAd,CARR,CAAP;AAWA;;AAGD,SAASG,cAAT,CAAwBnB,IAAxB,EAA8B;AAE7B,QAAMoB,OAAO,GAAG;AACfC,IAAAA,QAAQ,EAAErB,IAAI,CAACsB,KADA;AAEfC,IAAAA,QAAQ,EAAEvB,IAAI,CAACuB,QAFA;AAGfC,IAAAA,UAAU,EAAE,UAHG;AAIfC,IAAAA,SAAS,EAAE3B,MAAM,CAAC4B,SAJH;AAKfC,IAAAA,aAAa,EAAE7B,MAAM,CAAC8B;AALP,GAAhB;AASA,SAAO3B,KAAK,CAACH,MAAM,CAAC+B,aAAR,EAAuB;AAClC1B,IAAAA,MAAM,EAAE,MAD0B;AAElCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAec,OAAf,CAF4B;AAGlCb,IAAAA,OAAO,EAAE;AACR,sBAAgB;AADR;AAHyB,GAAvB,CAAL,CAOLC,IAPK,CAOAC,QAAQ,IAAIA,QAAQ,CAACC,MAAT,KAAoB,GAApB,IAA2BD,QAAQ,CAACE,EAApC,GAAyCF,QAAQ,CAACG,IAAT,EAAzC,GAA2DC,OAAO,CAACC,MAAR,CAAeL,QAAf,CAPvE,EAQLM,KARK,CAQEC,CAAD,IAAOC,OAAO,CAACC,KAAR,CAAcF,CAAd,CARR,CAAP;AASA;;AAED,UAAUc,kBAAV,CAA6BC,MAA7B,EAAqC;AAEpC,QAAM/B,IAAI,GAAG,MAAMP,IAAI,CAACM,iBAAD,EAAoBgC,MAAM,CAACC,OAA3B,CAAvB;AAEA,MAAIhC,IAAJ,EACC,MAAMR,GAAG,CAACI,WAAW,CAACI,IAAD,CAAZ,CAAT,CADD,KAGC,MAAMR,GAAG,CAACK,iBAAiB,CAACG,IAAD,CAAlB,CAAT;AACD;;AAED,UAAUiC,eAAV,CAA0BF,MAA1B,EAAkC;AACjC,QAAM/B,IAAI,GAAG,MAAMP,IAAI,CAAC0B,cAAD,EAAiBY,MAAM,CAACC,OAAxB,CAAvB;AAEA,MAAIhC,IAAJ,EACC,MAAMR,GAAG,CAACI,WAAW,CAACI,IAAD,CAAZ,CAAT,CADD,KAGC,MAAMR,GAAG,CAACK,iBAAiB,CAACG,IAAD,CAAlB,CAAT;AACD;;AAED,OAAO,UAAUkC,iBAAV,GAA8B;AACpC,QAAM3C,SAAS,CAACG,kBAAD,EAAqBoC,kBAArB,CAAf;AACA;AAED,OAAO,UAAUK,cAAV,GAA2B;AACjC,QAAM5C,SAAS,CAACI,eAAD,EAAkBsC,eAAlB,CAAf;AACA","sourcesContent":["import { takeEvery, put, call } from 'redux-saga/effects';\r\nimport { SEND_REGISTER_DATA, SEND_LOGIN_DATA, putAuthData, putFailedAuthData } from './actions';\r\n\r\nimport * as config from '../config';\r\n\r\n\r\nfunction fetchRegisterData(data) {\r\n\r\n\treturn fetch(config.URL_REGISTER_API, { \r\n\t\tmethod: 'POST', \r\n\t\tbody: JSON.stringify(data),\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t},\r\n\t})\r\n\t\t.then(response => response.status === 404 || response.ok ? response.json() : Promise.reject(response))\r\n\t\t.catch((e) => console.error(e));\r\n\t\r\n\r\n}\r\n\r\n\r\nfunction fetchLoginData(data) {\r\n\r\n\tconst newData = {\r\n\t\tusername: data.email,\r\n\t\tpassword: data.password,\r\n\t\tgrant_type: 'password',\r\n\t\tclient_id: config.CLIENT_ID,\r\n\t\tclient_secret: config.CLIENT_SECRET\r\n\t}\r\n\r\n\r\n\treturn fetch(config.URL_LOGIN_API, { \r\n\t\tmethod: 'POST', \r\n\t\tbody: JSON.stringify(newData),\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t},\r\n\t})\r\n\t\t.then(response => response.status === 404 || response.ok ? response.json() : Promise.reject(response))\r\n\t\t.catch((e) => console.error(e));\r\n}\r\n\r\nfunction* workerRegisterData(action) {\r\n\t\r\n\tconst data = yield call(fetchRegisterData, action.payload);\r\n\t\r\n\tif (data) \t\r\n\t\tyield put(putAuthData(data));\r\n\telse \r\n\t\tyield put(putFailedAuthData(data));\r\n}\r\n\r\nfunction* workerLoginData(action) {\r\n\tconst data = yield call(fetchLoginData, action.payload);\r\n\t\r\n\tif (data) \t\r\n\t\tyield put(putAuthData(data));\r\n\telse \r\n\t\tyield put(putFailedAuthData(data));\r\n}\r\n\r\nexport function* watchRegisterData() {\r\n\tyield takeEvery(SEND_REGISTER_DATA, workerRegisterData);\r\n}\r\n\r\nexport function* watchLoginData() {\r\n\tyield takeEvery(SEND_LOGIN_DATA, workerLoginData);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}