{"ast":null,"code":"import { takeEvery, put, call } from 'redux-saga/effects';\nimport { GET_USER_PROJECTS, CREATE_USER_PROJECT, DELETE_USER_PROJECT, ADD_USER_IN_PROJECT, putDeletedUserProject, putGottenUserProjects, putCreatedUserProject } from './actions';\nimport fetchWithAuth from '../fetchWithAuth';\nimport * as config from '../config';\nimport store from '../index';\n\nfunction fetchAddUserInProjects(projectId) {\n  const USER_TOKEN = store.getState().auth.token;\n  return fetch(`${config.URL_PROJECT_API}/${projectId}`, {\n    method: 'DELETE',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${USER_TOKEN}`\n    }\n  }).then(response => response.status === 404 || response.ok ? response.json() : Promise.reject(response)).catch(e => console.error(e));\n} // Workers\n\n\nfunction* workerGetProjects(action) {\n  const response = yield fetchWithAuth(config.URL_PROJECT_API);\n  if (response) yield put(putGottenUserProjects(response));\n}\n\nfunction* workerCreateProjects(action) {\n  const response = yield fetchWithAuth(config.URL_PROJECT_API, 'POST', action.payload);\n  ;\n  if (response) yield put(putCreatedUserProject(response.data));\n}\n\nfunction* workerDeleteProjects(action) {\n  const response = yield fetchWithAuth(`${config.URL_PROJECT_API}/${action.payload}`, 'DELETE');\n  if (response) yield put(putDeletedUserProject(response.data));\n} // Watchers \n\n\nexport function* watchGetProjects() {\n  yield takeEvery(GET_USER_PROJECTS, workerGetProjects);\n}\nexport function* watchCreateProjects() {\n  yield takeEvery(CREATE_USER_PROJECT, workerCreateProjects);\n}\nexport function* watchDeleteProjects() {\n  yield takeEvery(DELETE_USER_PROJECT, workerDeleteProjects);\n}\nexport function* watchAddUserInProject() {\n  yield takeEvery(ADD_USER_IN_PROJECT, fetchAddUserInProjects);\n}","map":{"version":3,"sources":["C:/Users/limon/Desktop/my projects/myCode/myCode.React/my_code/src/store/projects/sagas.js"],"names":["takeEvery","put","call","GET_USER_PROJECTS","CREATE_USER_PROJECT","DELETE_USER_PROJECT","ADD_USER_IN_PROJECT","putDeletedUserProject","putGottenUserProjects","putCreatedUserProject","fetchWithAuth","config","store","fetchAddUserInProjects","projectId","USER_TOKEN","getState","auth","token","fetch","URL_PROJECT_API","method","headers","then","response","status","ok","json","Promise","reject","catch","e","console","error","workerGetProjects","action","workerCreateProjects","payload","data","workerDeleteProjects","watchGetProjects","watchCreateProjects","watchDeleteProjects","watchAddUserInProject"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,GAAnB,EAAwBC,IAAxB,QAAmC,oBAAnC;AACA,SACEC,iBADF,EAEEC,mBAFF,EAGEC,mBAHF,EAIEC,mBAJF,EAKEC,qBALF,EAMEC,qBANF,EAOEC,qBAPF,QAQO,WARP;AAUA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAO,KAAKC,MAAZ,MAAwB,WAAxB;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAGA,SAASC,sBAAT,CAAgCC,SAAhC,EAA2C;AACzC,QAAMC,UAAU,GAAGH,KAAK,CAACI,QAAN,GAAiBC,IAAjB,CAAsBC,KAAzC;AACA,SAAOC,KAAK,CAAE,GAAER,MAAM,CAACS,eAAgB,IAAGN,SAAU,EAAxC,EAA2C;AACrDO,IAAAA,MAAM,EAAE,QAD6C;AAErDC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB,kBAFT;AAGP,uBAAkB,UAASP,UAAW;AAH/B;AAF4C,GAA3C,CAAL,CAQJQ,IARI,CAQCC,QAAQ,IAAIA,QAAQ,CAACC,MAAT,KAAoB,GAApB,IAA2BD,QAAQ,CAACE,EAApC,GAAyCF,QAAQ,CAACG,IAAT,EAAzC,GAA2DC,OAAO,CAACC,MAAR,CAAeL,QAAf,CARxE,EASJM,KATI,CASGC,CAAD,IAAOC,OAAO,CAACC,KAAR,CAAcF,CAAd,CATT,CAAP;AAWD,C,CAGD;;;AAEA,UAAUG,iBAAV,CAA4BC,MAA5B,EAAoC;AAEnC,QAAMX,QAAQ,GAAG,MAAMd,aAAa,CAACC,MAAM,CAACS,eAAR,CAApC;AAEA,MAAII,QAAJ,EACG,MAAMvB,GAAG,CAACO,qBAAqB,CAACgB,QAAD,CAAtB,CAAT;AACH;;AAED,UAAUY,oBAAV,CAA+BD,MAA/B,EAAuC;AAEtC,QAAMX,QAAQ,GAAG,MAAMd,aAAa,CAACC,MAAM,CAACS,eAAR,EAAyB,MAAzB,EAAiCe,MAAM,CAACE,OAAxC,CAApC;AAAqF;AAErF,MAAIb,QAAJ,EACG,MAAMvB,GAAG,CAACQ,qBAAqB,CAACe,QAAQ,CAACc,IAAV,CAAtB,CAAT;AACH;;AAED,UAAUC,oBAAV,CAA+BJ,MAA/B,EAAuC;AAEtC,QAAMX,QAAQ,GAAG,MAAMd,aAAa,CAAE,GAAEC,MAAM,CAACS,eAAgB,IAAGe,MAAM,CAACE,OAAQ,EAA7C,EAAgD,QAAhD,CAApC;AAEA,MAAIb,QAAJ,EACG,MAAMvB,GAAG,CAACM,qBAAqB,CAACiB,QAAQ,CAACc,IAAV,CAAtB,CAAT;AACH,C,CAID;;;AAEA,OAAO,UAAUE,gBAAV,GAA6B;AAClC,QAAMxC,SAAS,CAACG,iBAAD,EAAoB+B,iBAApB,CAAf;AACD;AAED,OAAO,UAAUO,mBAAV,GAAgC;AACrC,QAAMzC,SAAS,CAACI,mBAAD,EAAsBgC,oBAAtB,CAAf;AACD;AAED,OAAO,UAAUM,mBAAV,GAAgC;AACrC,QAAM1C,SAAS,CAACK,mBAAD,EAAsBkC,oBAAtB,CAAf;AACD;AAED,OAAO,UAAUI,qBAAV,GAAkC;AACvC,QAAM3C,SAAS,CAACM,mBAAD,EAAsBO,sBAAtB,CAAf;AACD","sourcesContent":["import {takeEvery, put, call} from 'redux-saga/effects';\r\nimport {\r\n  GET_USER_PROJECTS,\r\n  CREATE_USER_PROJECT,\r\n  DELETE_USER_PROJECT,\r\n  ADD_USER_IN_PROJECT,\r\n  putDeletedUserProject,\r\n  putGottenUserProjects,\r\n  putCreatedUserProject\r\n} from './actions';\r\n\r\nimport fetchWithAuth from '../fetchWithAuth';\r\nimport * as config from '../config';\r\nimport store from '../index';\r\n\r\n\r\nfunction fetchAddUserInProjects(projectId) {\r\n  const USER_TOKEN = store.getState().auth.token;\r\n  return fetch(`${config.URL_PROJECT_API}/${projectId}`, { \r\n    method: 'DELETE', \r\n    headers: {      \r\n      'Accept': 'application/json',\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${USER_TOKEN}`\r\n    },\r\n  })\r\n    .then(response => response.status === 404 || response.ok ? response.json() : Promise.reject(response))\r\n    .catch((e) => console.error(e));\r\n  \r\n}\r\n\r\n\r\n// Workers\r\n\r\nfunction* workerGetProjects(action) {\r\n  \r\n\tconst response = yield fetchWithAuth(config.URL_PROJECT_API);\r\n  \r\n\tif (response) \t\r\n    yield put(putGottenUserProjects(response));\r\n}\r\n\r\nfunction* workerCreateProjects(action) {\r\n  \r\n\tconst response = yield fetchWithAuth(config.URL_PROJECT_API, 'POST', action.payload);;\r\n  \r\n\tif (response) \t\r\n    yield put(putCreatedUserProject(response.data));\r\n}\r\n\r\nfunction* workerDeleteProjects(action) {\r\n  \r\n\tconst response = yield fetchWithAuth(`${config.URL_PROJECT_API}/${action.payload}`, 'DELETE');\r\n  \r\n\tif (response) \t\r\n    yield put(putDeletedUserProject(response.data));\r\n}\r\n\r\n\r\n\r\n// Watchers \r\n\r\nexport function* watchGetProjects() {\r\n  yield takeEvery(GET_USER_PROJECTS, workerGetProjects);\r\n}\r\n\r\nexport function* watchCreateProjects() {\r\n  yield takeEvery(CREATE_USER_PROJECT, workerCreateProjects);\r\n}\r\n\r\nexport function* watchDeleteProjects() {\r\n  yield takeEvery(DELETE_USER_PROJECT, workerDeleteProjects);\r\n}\r\n\r\nexport function* watchAddUserInProject() {\r\n  yield takeEvery(ADD_USER_IN_PROJECT, fetchAddUserInProjects);\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}