{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\limon\\\\Desktop\\\\my projects\\\\myCode\\\\myCode.React\\\\my_code\\\\src\\\\components\\\\Editor\\\\Editor.jsx\";\nimport React, { Component } from 'react';\nimport { useParams } from 'react-router-dom';\nimport AceEditor from \"react-ace\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCopy, faExpand, faTrash, faSave } from '@fortawesome/free-solid-svg-icons';\nimport \"ace-builds/src-noconflict/theme-tomorrow_night\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport { matchPath } from 'react-router-dom';\nimport './Editor.sass';\nimport Loader from '../UI/Loader/Loader';\nimport store from '../../store/index';\n\nclass Editor extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      snippetId: ''\n    };\n  }\n\n  componentDidMount() {\n    this.bindSaveKeys();\n  }\n\n  bindSaveKeys() {\n    let timer;\n    document.addEventListener('keydown', e => {\n      if (e.ctrlKey && e.keyCode == 83) {\n        e.preventDefault();\n        clearTimeout(timer);\n        timer = setTimeout(this.onSaveSnippet.bind(this), 300);\n      }\n    });\n  }\n\n  onSaveSnippet() {\n    const snippetId = this.match.params.snippetId;\n    const snippets = store.getState().snippets.snippetsList.data;\n    if (!snippets) return false;\n    let snippet = snippets.filter(snippet => snippetId == snippet.id)[0];\n    console.log(snippet.text);\n    this.props.onClickSaveButton({\n      snippetId,\n      data: {\n        text: snippet.text\n      }\n    });\n  }\n\n  onChangeEditor(value, snippet) {\n    snippet.text = value;\n  }\n\n  render() {\n    var _this$props$snippets, _this$props$snippets$;\n\n    this.match = matchPath(this.props.location.pathname, {\n      path: '/project:projectId/component:componentId/snippet:snippetId'\n    });\n    let snippetId = this.match.params.snippetId; // if (snippetId != snippet.id) \n    //   this.setState({snippetId: this.match.params.snippetId});\n    //   console.log(this.match.params.snippetId);\n\n    if ((_this$props$snippets = this.props.snippets) === null || _this$props$snippets === void 0 ? void 0 : (_this$props$snippets$ = _this$props$snippets.snippetsList) === null || _this$props$snippets$ === void 0 ? void 0 : _this$props$snippets$.data) {\n      const snippet = this.props.snippets.snippetsList.data.filter(snippet => this.match.params.snippetId == snippet.id)[0];\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"editor\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        id: \"editor-area\",\n        className: \"editor__area\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(AceEditor, {\n        mode: \"javascript\",\n        onChange: value => {\n          this.onChangeEditor(value, snippet);\n        },\n        theme: \"tomorrow_night\",\n        value: snippet.text || '',\n        name: 'snippet_' + snippet.id,\n        editorProps: {\n          $blockScrolling: true\n        },\n        height: \"100%\",\n        width: \"100%\",\n        tabSize: 2,\n        fontSize: \"16px\",\n        placeholder: \"\\u0412\\u0441\\u0442\\u0430\\u0432\\u0442\\u0435 \\u043A\\u043E\\u0434, \\u043A\\u043E\\u0442\\u043E\\u0440\\u044B\\u0439 \\u0445\\u043E\\u0442\\u0438\\u0442\\u0435 \\u0441\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\",\n        style: {\n          padding: '10px'\n        },\n        setOptions: {\n          enableBasicAutocompletion: true,\n          enableLiveAutocompletion: true,\n          enableSnippets: true\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"editor__panel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"editor__controls\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        className: \"editor__control\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"editor__button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faExpand,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 19\n        }\n      }))), /*#__PURE__*/React.createElement(\"li\", {\n        className: \"editor__control\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"editor__button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faCopy,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 19\n        }\n      }))), /*#__PURE__*/React.createElement(\"li\", {\n        className: \"editor__control\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"editor__button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faTrash,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 19\n        }\n      }))), /*#__PURE__*/React.createElement(\"li\", {\n        className: \"editor__control\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"editor__button\",\n        onClick: () => {\n          this.props.onClickSaveButton({\n            snippetId: this.match.params.snippetId,\n            data: {\n              text: snippet.text\n            }\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSave,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 19\n        }\n      }))))));\n    } else {\n      return /*#__PURE__*/React.createElement(Loader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 16\n        }\n      });\n    }\n  }\n\n}\n\n;\nexport default Editor;","map":{"version":3,"sources":["C:/Users/limon/Desktop/my projects/myCode/myCode.React/my_code/src/components/Editor/Editor.jsx"],"names":["React","Component","useParams","AceEditor","FontAwesomeIcon","faCopy","faExpand","faTrash","faSave","matchPath","Loader","store","Editor","constructor","props","state","snippetId","componentDidMount","bindSaveKeys","timer","document","addEventListener","e","ctrlKey","keyCode","preventDefault","clearTimeout","setTimeout","onSaveSnippet","bind","match","params","snippets","getState","snippetsList","data","snippet","filter","id","console","log","text","onClickSaveButton","onChangeEditor","value","render","location","pathname","path","$blockScrolling","padding","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {useParams} from 'react-router-dom';\r\nimport AceEditor from \"react-ace\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCopy, faExpand, faTrash, faSave } from '@fortawesome/free-solid-svg-icons'\r\nimport \"ace-builds/src-noconflict/theme-tomorrow_night\";\r\nimport \"ace-builds/src-noconflict/mode-javascript\";\r\nimport {matchPath} from 'react-router-dom';\r\nimport './Editor.sass';\r\nimport Loader from '../UI/Loader/Loader';\r\nimport store from '../../store/index';\r\n\r\n\r\nclass Editor extends Component {\r\n\r\n  constructor(props) {\r\n    super(props); \r\n\r\n    this.state = {\r\n      snippetId: ''\r\n    };\r\n  }\r\n  \r\n  componentDidMount() {\r\n    this.bindSaveKeys();\r\n  }\r\n\r\n  bindSaveKeys() {\r\n    let timer;\r\n    document.addEventListener('keydown', (e) => {\r\n      if (e.ctrlKey && e.keyCode == 83) {\r\n        e.preventDefault();\r\n        clearTimeout(timer);\r\n\r\n        timer = setTimeout(this.onSaveSnippet.bind(this), 300);\r\n      }\r\n    });\r\n  }\r\n\r\n  onSaveSnippet() {\r\n    const snippetId = this.match.params.snippetId\r\n    const snippets = store.getState().snippets.snippetsList.data;\r\n    \r\n    if (!snippets)\r\n      return false;\r\n    \r\n    let snippet = snippets.filter(snippet => snippetId == snippet.id)[0]; \r\n    console.log(snippet.text);\r\n    \r\n\r\n    this.props.onClickSaveButton({snippetId, data: {text: snippet.text}});\r\n  }\r\n\r\n\r\n  \r\n  onChangeEditor(value, snippet) {\r\n    snippet.text = value;\r\n  }\r\n \r\n  render() {\r\n    this.match = matchPath(this.props.location.pathname, {\r\n      path: '/project:projectId/component:componentId/snippet:snippetId'\r\n    });\r\n\r\n    let snippetId = this.match.params.snippetId;\r\n\r\n    // if (snippetId != snippet.id) \r\n    //   this.setState({snippetId: this.match.params.snippetId});\r\n    //   console.log(this.match.params.snippetId);\r\n\r\n\r\n    if (this.props.snippets?.snippetsList?.data) {\r\n      const  snippet = this.props.snippets.snippetsList.data.filter(snippet => this.match.params.snippetId == snippet.id)[0];\r\n      \r\n    \r\n      return (\r\n        <div className=\"editor\" >\r\n          <div id=\"editor-area\" className=\"editor__area\">\r\n            <AceEditor\r\n              mode=\"javascript\"\r\n              onChange={(value) => {this.onChangeEditor(value, snippet)}}\r\n              theme=\"tomorrow_night\"\r\n              value={snippet.text || ''}\r\n              name={'snippet_' + snippet.id}\r\n              editorProps={{ $blockScrolling: true }}\r\n              height='100%'\r\n              width='100%'\r\n              tabSize={2}\r\n              fontSize='16px'\r\n              placeholder='Вставте код, который хотите сохранить'\r\n              style={{padding: '10px'}}\r\n              setOptions={{\r\n                enableBasicAutocompletion: true,\r\n                enableLiveAutocompletion: true,\r\n                enableSnippets: true\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"editor__panel\">\r\n            <ul className=\"editor__controls\">\r\n              <li className=\"editor__control\">\r\n                <button className=\"editor__button\">\r\n                  <FontAwesomeIcon icon={faExpand} />\r\n                </button>\r\n              </li>\r\n              <li className=\"editor__control\">\r\n                <button className=\"editor__button\">\r\n                  <FontAwesomeIcon icon={faCopy} />\r\n                </button>\r\n              </li>\r\n              <li className=\"editor__control\">\r\n                <button className=\"editor__button\">\r\n                  <FontAwesomeIcon icon={faTrash} />\r\n                </button>\r\n              </li>\r\n              <li className=\"editor__control\">\r\n                <button className=\"editor__button\" onClick={() => { this.props.onClickSaveButton({snippetId: this.match.params.snippetId, data: {text: snippet.text}}) }}>\r\n                  <FontAwesomeIcon icon={faSave} />\r\n                </button>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      );\r\n      } else {\r\n        return <Loader />\r\n      }\r\n  }\r\n \r\n};\r\n\r\nexport default Editor;"]},"metadata":{},"sourceType":"module"}