{"ast":null,"code":"import { takeEvery, put, call } from 'redux-saga/effects';\nimport { SEND_REGISTER_DATA, SEND_LOGIN_DATA, putRegisterData, putFailedRegisterData, sendLoginData, putLoginData } from './actions';\nimport * as config from '../config';\n\nfunction fetchRegisterData(data) {\n  return fetch(config.URL_REGISTER_API, {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(response => response.status == 404 || response.ok ? response.json() : Promise.reject(response)).catch(e => console.error(e));\n}\n\nfunction fetchLoginData(data) {\n  console.log(JSON.stringify({\n    username: data.email,\n    password: data.password,\n    grant_type: 'password',\n    client_id: config.CLIENT_ID,\n    client_secret: config.CLIENT_SECRET\n  }));\n  return fetch(config.URL_LOGIN_API, {\n    method: 'POST',\n    body: JSON.stringify({\n      username: data.email,\n      password: data.password,\n      grant_type: 'password',\n      client_id: config.CLIENT_ID,\n      client_secret: config.CLIENT_SECRET\n    }) // headers: {\n    //   'Content-Type': 'application/json'\n    // },\n\n  }).then(response => response.status == 404 || response.ok ? response.json() : Promise.reject(response)).catch(e => console.error(e));\n}\n\nfunction* workerRegisterData(action) {\n  const data = yield call(fetchRegisterData, action.payload);\n  if (data.success) yield put(putRegisterData(data));else yield put(putFailedRegisterData(data));\n}\n\nfunction* workerLoginData(action) {\n  console.log('работает', action.payload);\n  const data = yield call(fetchLoginData, action.payload);\n  if (data.success) yield put(putLoginData(data));else yield put(putFailedRegisterData(data));\n}\n\nexport function* watchRegisterData() {\n  yield takeEvery(SEND_REGISTER_DATA, workerRegisterData);\n}\nexport function* watchLoginData() {\n  yield takeEvery(SEND_LOGIN_DATA, workerLoginData);\n} // export function* watchRegisterPutData() {\n//   yield takeEvery(PUT_REGISTER_DATA, workerRegisterData);\n// }","map":{"version":3,"sources":["C:/Users/limon/Desktop/my projects/myCode/myCode.React/my_code/src/store/auth/sagas.js"],"names":["takeEvery","put","call","SEND_REGISTER_DATA","SEND_LOGIN_DATA","putRegisterData","putFailedRegisterData","sendLoginData","putLoginData","config","fetchRegisterData","data","fetch","URL_REGISTER_API","method","body","JSON","stringify","headers","then","response","status","ok","json","Promise","reject","catch","e","console","error","fetchLoginData","log","username","email","password","grant_type","client_id","CLIENT_ID","client_secret","CLIENT_SECRET","URL_LOGIN_API","workerRegisterData","action","payload","success","workerLoginData","watchRegisterData","watchLoginData"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,GAApB,EAAyBC,IAAzB,QAAqC,oBAArC;AACA,SAASC,kBAAT,EAA6BC,eAA7B,EAA8CC,eAA9C,EAA+DC,qBAA/D,EAAsFC,aAAtF,EAAqGC,YAArG,QAAyH,WAAzH;AACA,OAAO,KAAKC,MAAZ,MAAwB,WAAxB;;AAGA,SAASC,iBAAT,CAA2BC,IAA3B,EAAiC;AAE/B,SAAOC,KAAK,CAACH,MAAM,CAACI,gBAAR,EAA0B;AACpCC,IAAAA,MAAM,EAAE,MAD4B;AAEpCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAF8B;AAGpCO,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAH2B,GAA1B,CAAL,CAOJC,IAPI,CAOCC,QAAQ,IAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAnB,IAA0BD,QAAQ,CAACE,EAAnC,GAAwCF,QAAQ,CAACG,IAAT,EAAxC,GAA0DC,OAAO,CAACC,MAAR,CAAeL,QAAf,CAPvE,EAQJM,KARI,CAQGC,CAAD,IAAOC,OAAO,CAACC,KAAR,CAAcF,CAAd,CART,CAAP;AAWD;;AAGD,SAASG,cAAT,CAAwBnB,IAAxB,EAA8B;AAE5BiB,EAAAA,OAAO,CAACG,GAAR,CAAYf,IAAI,CAACC,SAAL,CAAe;AACzBe,IAAAA,QAAQ,EAAErB,IAAI,CAACsB,KADU;AAEzBC,IAAAA,QAAQ,EAAEvB,IAAI,CAACuB,QAFU;AAGzBC,IAAAA,UAAU,EAAE,UAHa;AAIzBC,IAAAA,SAAS,EAAE3B,MAAM,CAAC4B,SAJO;AAKzBC,IAAAA,aAAa,EAAE7B,MAAM,CAAC8B;AALG,GAAf,CAAZ;AAQA,SAAO3B,KAAK,CAACH,MAAM,CAAC+B,aAAR,EAAuB;AACjC1B,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBe,MAAAA,QAAQ,EAAErB,IAAI,CAACsB,KADI;AAEnBC,MAAAA,QAAQ,EAAEvB,IAAI,CAACuB,QAFI;AAGnBC,MAAAA,UAAU,EAAE,UAHO;AAInBC,MAAAA,SAAS,EAAE3B,MAAM,CAAC4B,SAJC;AAKnBC,MAAAA,aAAa,EAAE7B,MAAM,CAAC8B;AALH,KAAf,CAF2B,CASjC;AACA;AACA;;AAXiC,GAAvB,CAAL,CAaJpB,IAbI,CAaCC,QAAQ,IAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAnB,IAA0BD,QAAQ,CAACE,EAAnC,GAAwCF,QAAQ,CAACG,IAAT,EAAxC,GAA0DC,OAAO,CAACC,MAAR,CAAeL,QAAf,CAbvE,EAcJM,KAdI,CAcGC,CAAD,IAAOC,OAAO,CAACC,KAAR,CAAcF,CAAd,CAdT,CAAP;AAiBD;;AAED,UAAUc,kBAAV,CAA6BC,MAA7B,EAAqC;AAEpC,QAAM/B,IAAI,GAAG,MAAMT,IAAI,CAACQ,iBAAD,EAAoBgC,MAAM,CAACC,OAA3B,CAAvB;AAEA,MAAIhC,IAAI,CAACiC,OAAT,EACG,MAAM3C,GAAG,CAACI,eAAe,CAACM,IAAD,CAAhB,CAAT,CADH,KAGG,MAAMV,GAAG,CAACK,qBAAqB,CAACK,IAAD,CAAtB,CAAT;AAGH;;AAED,UAAUkC,eAAV,CAA0BH,MAA1B,EAAkC;AAChCd,EAAAA,OAAO,CAACG,GAAR,CAAY,UAAZ,EAAwBW,MAAM,CAACC,OAA/B;AACD,QAAMhC,IAAI,GAAG,MAAMT,IAAI,CAAC4B,cAAD,EAAiBY,MAAM,CAACC,OAAxB,CAAvB;AAEA,MAAIhC,IAAI,CAACiC,OAAT,EACG,MAAM3C,GAAG,CAACO,YAAY,CAACG,IAAD,CAAb,CAAT,CADH,KAGG,MAAMV,GAAG,CAACK,qBAAqB,CAACK,IAAD,CAAtB,CAAT;AAGH;;AAED,OAAO,UAAUmC,iBAAV,GAA8B;AACnC,QAAM9C,SAAS,CAACG,kBAAD,EAAqBsC,kBAArB,CAAf;AACD;AAED,OAAO,UAAUM,cAAV,GAA2B;AAChC,QAAM/C,SAAS,CAACI,eAAD,EAAkByC,eAAlB,CAAf;AACD,C,CAED;AACA;AACA","sourcesContent":["import { takeEvery, put, call } from 'redux-saga/effects';\r\nimport { SEND_REGISTER_DATA, SEND_LOGIN_DATA, putRegisterData, putFailedRegisterData, sendLoginData, putLoginData } from './actions';\r\nimport * as config from '../config';\r\n\r\n\r\nfunction fetchRegisterData(data) {\r\n\r\n  return fetch(config.URL_REGISTER_API, { \r\n    method: 'POST', \r\n    body: JSON.stringify(data),\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n  })\r\n    .then(response => response.status == 404 || response.ok ? response.json() : Promise.reject(response))\r\n    .catch((e) => console.error(e));\r\n  \r\n\r\n}\r\n\r\n\r\nfunction fetchLoginData(data) {\r\n\r\n  console.log(JSON.stringify({\r\n    username: data.email,\r\n    password: data.password,\r\n    grant_type: 'password',\r\n    client_id: config.CLIENT_ID,\r\n    client_secret: config.CLIENT_SECRET\r\n  }));\r\n\r\n  return fetch(config.URL_LOGIN_API, { \r\n    method: 'POST', \r\n    body: JSON.stringify({\r\n      username: data.email,\r\n      password: data.password,\r\n      grant_type: 'password',\r\n      client_id: config.CLIENT_ID,\r\n      client_secret: config.CLIENT_SECRET\r\n    }),\r\n    // headers: {\r\n    //   'Content-Type': 'application/json'\r\n    // },\r\n  })\r\n    .then(response => response.status == 404 || response.ok ? response.json() : Promise.reject(response))\r\n    .catch((e) => console.error(e));\r\n  \r\n\r\n}\r\n\r\nfunction* workerRegisterData(action) {\r\n  \r\n\tconst data = yield call(fetchRegisterData, action.payload);\r\n  \r\n\tif (data.success) \t\r\n    yield put(putRegisterData(data));\r\n  else \r\n    yield put(putFailedRegisterData(data));\r\n\t\r\n  \r\n}\r\n\r\nfunction* workerLoginData(action) {\r\n  console.log('работает', action.payload)\r\n\tconst data = yield call(fetchLoginData, action.payload);\r\n  \r\n\tif (data.success) \t\r\n    yield put(putLoginData(data));\r\n  else \r\n    yield put(putFailedRegisterData(data));\r\n\t\r\n  \r\n}\r\n\r\nexport function* watchRegisterData() {\r\n  yield takeEvery(SEND_REGISTER_DATA, workerRegisterData);\r\n}\r\n\r\nexport function* watchLoginData() {\r\n  yield takeEvery(SEND_LOGIN_DATA, workerLoginData);\r\n}\r\n\r\n// export function* watchRegisterPutData() {\r\n//   yield takeEvery(PUT_REGISTER_DATA, workerRegisterData);\r\n// }"]},"metadata":{},"sourceType":"module"}